{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","msgsRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","dummyDiv","useRef","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","useEffect","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","props","messageClass","src","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4TAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAsB3B,SAASC,IAOP,OACE,4BAAQC,UAAU,UAAUC,QANL,WACvB,IAAMC,EAAW,IAAId,IAASS,KAAKM,mBACnCN,EAAKO,gBAAgBF,KAIrB,uBAKJ,SAASG,IACP,OAAOR,EAAKS,aACV,4BAAQL,QAAU,kBAAMJ,EAAKU,YAA7B,YAKJ,SAASC,IAEP,IAAMC,EAAUX,EAAUY,WAAW,YAC/BC,EAAQF,EAAQG,QAAQ,aAAaC,MAAM,IAH/B,EAKCC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KASZC,EAAWC,mBAEXC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAElBD,EAAEE,iBAFgB,EAIQ5B,EAAKS,YAAvBoB,EAJU,EAIVA,IAAKC,EAJK,EAILA,SAJK,SAMZlB,EAAQmB,IAAI,CAChBC,KAAMX,EACNY,UAAW1C,IAASU,UAAUiC,WAAWC,kBACzCN,MACAC,aAVgB,OAalBR,EAAa,IAbK,2CAAH,sDAsBjB,OAFAc,qBAJuB,WACrBb,EAASc,QAAQC,eAAe,CAAEC,SAAU,aAGpB,CAACpB,IAGzB,oCACE,8BACIA,GAAYA,EAASqB,KAAI,SAAAC,GAAG,OAAI,kBAACC,EAAD,CAAaC,IAAMF,EAAIG,GAAKC,QAASJ,OAEvE,yBAAKK,IAAMvB,KAGb,0BAAMwB,SAAWtB,GACf,2BAAOuB,MAAQ3B,EAAY4B,SAAW,SAACvB,GAAD,OAAOJ,EAAaI,EAAEwB,OAAOF,QAASG,YAAY,mBAExF,4BAAQC,KAAK,UAAb,wBASR,SAASV,EAAYW,GAAQ,IAAD,EAEIA,EAAMR,QAA7Bb,EAFmB,EAEnBA,KAAMH,EAFa,EAEbA,IAAKC,EAFQ,EAERA,SAEZwB,EAAezB,GAAO7B,EAAKS,YAAYoB,IAAM,OAAS,WAE5D,OACE,yBAAK1B,UAAS,kBAAcmD,IAE1B,yBAAKC,IAAMzB,IACX,2BAAKE,IAMIwB,MA5Gf,WAAgB,IAAD,EAEEC,YAAazD,GAArB0D,EAFM,oBAIb,OACE,yBAAKvD,UAAU,OACb,gCACE,oEACA,wCACA,kBAACK,EAAD,OAEF,iCACIkD,EAAO,kBAAC/C,EAAD,MAAe,kBAACT,EAAD,SCxBZyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/B,c","file":"static/js/main.1e5af8c5.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCYBPjmDQaghRfbfvos1CRGm1dtLo0W4SI\",\n  authDomain: \"debase-18.firebaseapp.com\",\n  databaseURL: \"https://debase-18.firebaseio.com\",\n  projectId: \"debase-18\",\n  storageBucket: \"debase-18.appspot.com\",\n  messagingSenderId: \"434905803549\",\n  appId: \"1:434905803549:web:bf77f232ad792793650ff4\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <h1>FireChat</h1>\n        <SignOut />\n      </header>\n      <section>\n        { user ? <ChatRoom /> : <SignIn /> }\n      </section>\n    </div>\n  );\n}\n\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <button className='sign-in' onClick={ signInWithGoogle }>Sign in with google</button>\n  );\n}\n\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={ () => auth.signOut() }>Sign Out</button>\n  )\n}\n\n\nfunction ChatRoom() {\n\n  const msgsRef = firestore.collection('messages');\n  const query = msgsRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState('');\n\n  const dummyDiv = useRef();\n\n  const sendMessage = async (e) => {\n\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await msgsRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n  };\n\n  const scrollToBottom = () => {\n    dummyDiv.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  useEffect(scrollToBottom, [messages]);\n\n  return (\n    <>\n      <main>\n        { messages && messages.map(msg => <ChatMessage key={ msg.id } message={msg} />) }\n\n        <div ref={ dummyDiv }></div>\n      </main>\n\n      <form onSubmit={ sendMessage }>\n        <input value={ formValue } onChange={ (e) => setFormValue(e.target.value) } placeholder=\"Type a message\"/>\n\n        <button type=\"submit\">üïäÔ∏è</button>\n\n      </form>\n    </>\n  );\n\n}\n\n\nfunction ChatMessage(props) {\n\n  const {text, uid, photoURL} = props.message;\n\n  const messageClass = uid == auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${ messageClass }`}>\n\n      <img src={ photoURL } />\n      <p>{ text }</p>\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}