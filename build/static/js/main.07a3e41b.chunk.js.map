{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","msgsRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","dummyDiv","useRef","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","type","props","messageClass","src","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4TAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAsB3B,SAASC,IAOP,OACE,4BAAQC,UAAU,UAAUC,QANL,WACvB,IAAMC,EAAW,IAAId,IAASS,KAAKM,mBACnCN,EAAKO,gBAAgBF,KAIrB,uBAKJ,SAASG,IACP,OAAOR,EAAKS,aACV,4BAAQL,QAAU,kBAAMJ,EAAKU,YAA7B,YAKJ,SAASC,IAEP,IAAMC,EAAUX,EAAUY,WAAW,YAC/BC,EAAQF,EAAQG,QAAQ,aAAaC,MAAM,IAH/B,EAKCC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KASZC,EAAWC,mBAEXC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAElBD,EAAEE,iBAFgB,EAIQ5B,EAAKS,YAAvBoB,EAJU,EAIVA,IAAKC,EAJK,EAILA,SAJK,SAMZlB,EAAQmB,IAAI,CAChBC,KAAMX,EACNY,UAAW1C,IAASU,UAAUiC,WAAWC,kBACzCN,MACAC,aAVgB,OAalBR,EAAa,IACbC,EAASa,QAAQC,eAAe,CAAEC,SAAU,WAd1B,2CAAH,sDAiBjB,OACE,oCACE,8BACInB,GAAYA,EAASoB,KAAI,SAAAC,GAAG,OAAI,kBAACC,EAAD,CAAaC,IAAMF,EAAIG,GAAKC,QAASJ,OAEvE,yBAAKK,IAAMtB,KAGb,0BAAMuB,SAAWrB,GACf,2BAAOsB,MAAQ1B,EAAY2B,SAAW,SAACtB,GAAD,OAAOJ,EAAaI,EAAEuB,OAAOF,UAEnE,4BAAQG,KAAK,UAAb,wBASR,SAAST,EAAYU,GAAQ,IAAD,EAEIA,EAAMP,QAA7BZ,EAFmB,EAEnBA,KAAMH,EAFa,EAEbA,IAAKC,EAFQ,EAERA,SAEZsB,EAAevB,GAAO7B,EAAKS,YAAYoB,IAAM,OAAS,WAE5D,OACE,yBAAK1B,UAAS,kBAAciD,IAE1B,yBAAKC,IAAMvB,IACX,2BAAKE,IAMIsB,MAvGf,WAAgB,IAAD,EAEEC,YAAavD,GAArBwD,EAFM,oBAIb,OACE,yBAAKrD,UAAU,OACb,gCACE,oEACA,wCACA,kBAACK,EAAD,OAEF,iCACIgD,EAAO,kBAAC7C,EAAD,MAAe,kBAACT,EAAD,SCxBZuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9B,c","file":"static/js/main.07a3e41b.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyCYBPjmDQaghRfbfvos1CRGm1dtLo0W4SI\",\r\n  authDomain: \"debase-18.firebaseapp.com\",\r\n  databaseURL: \"https://debase-18.firebaseio.com\",\r\n  projectId: \"debase-18\",\r\n  storageBucket: \"debase-18.appspot.com\",\r\n  messagingSenderId: \"434905803549\",\r\n  appId: \"1:434905803549:web:bf77f232ad792793650ff4\"\r\n});\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\n\r\nfunction App() {\r\n\r\n  const [user] = useAuthState(auth);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>‚öõÔ∏èüî•üí¨</h1>\r\n        <h1>FireChat</h1>\r\n        <SignOut />\r\n      </header>\r\n      <section>\r\n        { user ? <ChatRoom /> : <SignIn /> }\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction SignIn() {\r\n\r\n  const signInWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  }\r\n\r\n  return (\r\n    <button className='sign-in' onClick={ signInWithGoogle }>Sign in with google</button>\r\n  );\r\n}\r\n\r\n\r\nfunction SignOut() {\r\n  return auth.currentUser && (\r\n    <button onClick={ () => auth.signOut() }>Sign Out</button>\r\n  )\r\n}\r\n\r\n\r\nfunction ChatRoom() {\r\n\r\n  const msgsRef = firestore.collection('messages');\r\n  const query = msgsRef.orderBy('createdAt').limit(25);\r\n\r\n  const [messages] = useCollectionData(query, {idField: 'id'});\r\n\r\n  const [formValue, setFormValue] = useState('');\r\n\r\n  const dummyDiv = useRef();\r\n\r\n  const sendMessage = async (e) => {\r\n\r\n    e.preventDefault();\r\n\r\n    const { uid, photoURL } = auth.currentUser;\r\n\r\n    await msgsRef.add({\r\n      text: formValue,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL\r\n    })\r\n\r\n    setFormValue('');\r\n    dummyDiv.current.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        { messages && messages.map(msg => <ChatMessage key={ msg.id } message={msg} />) }\r\n\r\n        <div ref={ dummyDiv }></div>\r\n      </main>\r\n\r\n      <form onSubmit={ sendMessage }>\r\n        <input value={ formValue } onChange={ (e) => setFormValue(e.target.value) }/>\r\n\r\n        <button type=\"submit\">üïäÔ∏è</button>\r\n\r\n      </form>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\n\r\nfunction ChatMessage(props) {\r\n\r\n  const {text, uid, photoURL} = props.message;\r\n\r\n  const messageClass = uid == auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n  return (\r\n    <div className={`message ${ messageClass }`}>\r\n\r\n      <img src={ photoURL } />\r\n      <p>{ text }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}